# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd
from sklearn import datasets
from sklearn import metrics

#Uploading dataset
dataset = pd.read_csv('Credit.csv')
X= dataset.iloc[:,:-1].values
y= dataset.iloc[:,24].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 82)

# Feature Scaling to bring the variable in a single scale
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#Applying ANN

import keras
from keras.models import Sequential
from keras.layers import Dense

classifier = Sequential()

classifier.add(Dense(output_dim = 12,init = 'uniform',activation= 'relu',input_dim=24))

classifier.add(Dense(output_dim = 7,init = 'uniform',activation= 'relu'))

classifier.add(Dense(output_dim = 1,init = 'uniform',activation= 'sigmoid'))


classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

classifier.fit(X_train, y_train,batch_size=10,nb_epoch=100)

#predicting the test set result

y_pred=classifier.predict(X_test)
y_pred=(y_pred>0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
print(metrics.classification_report(y_test,y_pred))
print(metrics.confusion_matrix(y_test,y_pred ))