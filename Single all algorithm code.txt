# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd
from sklearn import datasets
from sklearn import metrics

#Uploading dataset
dataset = pd.read_csv('Credit.csv')
X= dataset.iloc[:,:-1].values
y= dataset.iloc[:,24].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 82)

# Feature Scaling to bring the variable in a single scale
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#logistic regression

from sklearn.linear_model import LogisticRegression
logisticregression = LogisticRegression()
logisticregression.fit(X_train, y_train)

# Predicting the Test set results
y_pred = logisticregression.predict(X_test)
print(y_pred)

#lets see the actual and predicted value side by side
y_compare = np.vstack((y_test,y_pred)).T

#actual value on the left side and predicted value on the right hand side
#printing the top 5 values
y_compare[:5,:]

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
print (accuracy_score(y_test, y_pred))
print(metrics.classification_report(y_test, y_pred))
print(metrics.confusion_matrix(y_test, y_pred))
cm = confusion_matrix(y_test, y_pred)
print(cm)

#Applying SVM Algorithm

# set model, fit and predict
from sklearn.svm import SVC
svm = SVC(kernel='rbf')
svm.fit(X_train, y_train)

# Predicting the Test set results
y_prediction = svm.predict(X_test)
print(y_prediction)

#lets see the actual and predicted value side by side
y_compare = np.vstack((y_test,y_prediction)).T

#actual value on the left side and predicted value on the right hand side
#printing the top 5 values
y_compare[:5,:]

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
print (accuracy_score(y_test, y_prediction))
print(metrics.classification_report(y_test, y_prediction))
print(metrics.confusion_matrix(y_test, y_prediction))
cm = confusion_matrix(y_test, y_prediction)
print(cm)

#Applying K-Fold cross validation
from sklearn.model_selection import cross_val_score
accuracies=cross_val_score(estimator=svm, X=X_train,y=y_train,cv=10,gamma=auto)
accuracies.mean()
accuracies.std() 

#Applying grid search to find the best model and the best parameters
from sklearn.model_selection import GridSearchCV
parameters= [{'C':[1,10,100,1000], 'kernel': ['linear']},
              {'C':[1,10,100,1000], 'kernel': ['rbf'], 'gamma': [0.5, 0.1 ,0.001 ,0.0001]}
              ]
grid_search= GridSearchCV(estimator=svm,
                          param_grid=parameters,
                          scoring='accuracy',
                          cv=10,
                          n_jobs=-1)
grid_search= grid_search.fit(X_train,y_train)
best_accuracy = grid_search.best_score_
best_parameters=grid_search.best_params_


#Applying Rndom Forest
from sklearn.ensemble import RandomForestClassifier
# set model, fit and predict
rfc = RandomForestClassifier(max_depth=10, random_state=0)
rfc.fit(X_train, y_train)

# Predicting the Test set results
y_prediction = rfc.predict(X_test)
print(y_prediction)

#lets see the actual and predicted value side by side
y_compare = np.vstack((y_test,y_prediction)).T

#actual value on the left side and predicted value on the right hand side
#printing the top 5 values
y_compare[:5,:]

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
print (accuracy_score(y_test, y_prediction))
print(metrics.classification_report(y_test, y_prediction))
print(metrics.confusion_matrix(y_test, y_prediction))


#APPLYING KNN
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier()

classifier.fit(X_train, y_train)


predictions = classifier.predict(X_test)
from sklearn.metrics import accuracy_score
print (accuracy_score(y_test, predictions))

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
print (accuracy_score(y_test, predictions))
print(metrics.classification_report(y_test, predictions))
print(metrics.confusion_matrix(y_test, predictions))

#Applying ANN

import keras
from keras.models import Sequential
from keras.layers import Dense

classifier = Sequential()

classifier.add(Dense(output_dim = 12,init = 'uniform',activation= 'relu',input_dim=24))

classifier.add(Dense(output_dim = 7,init = 'uniform',activation= 'relu'))

classifier.add(Dense(output_dim = 1,init = 'uniform',activation= 'sigmoid'))


classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

classifier.fit(X_train, y_train,batch_size=10,nb_epoch=100)

#predicting the test set result

y_pred=classifier.predict(X_test)
y_pred=(y_pred>0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
print(metrics.classification_report(y_test,y_pred))
print(metrics.confusion_matrix(y_test,y_pred ))


